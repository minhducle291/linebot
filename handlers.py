import pandas as pd
from urllib.parse import parse_qs
# LINE SDK v3
from linebot.v3.messaging import TextMessage, FlexMessage
from linebot.v3.messaging.models import FlexContainer  # d√πng ƒë·ªÉ √©p dict -> FlexContainer

from utils import build_flex_categories, build_flex_report_group, nearest_stores, build_flex_text_message
from report import report_thongtinchiahang, report_ketquabanhang
from config import NHU_CAU_PATH, NHAP_BAN_PATH

# ===== C·∫§U H√åNH HI·ªÇN TH·ªä B√ÅO C√ÅO =====
REPORTS_DISPLAY = [
    {"id": "thongtinchiahang", "title": "Th√¥ng tin chia h√†ng", "decription": "S·ªë l∆∞·ª£ng chia m·ªói ng√†y theo s·∫£n ph·∫©m."},
    {"id": "ketquabanhang",    "title": "K·∫øt qu·∫£ b√°n h√†ng", "decription": "Ch·ªâ s·ªë Nhu c·∫ßu - PO - Nh·∫≠p - B√°n trong 7 ng√†y g·∫ßn nh·∫•t."}
]

REPORT_HANDLERS = {
    "thongtinchiahang": report_thongtinchiahang,
    "ketquabanhang":    report_ketquabanhang
}

CATEGORIES = [
    {"id": 1234,  "title": "Rau C·ªß C√°c Lo·∫°i"},
    {"id": 1235,  "title": "Tr√°i C√¢y C√°c Lo·∫°i"},
    {"id": 1236,  "title": "Th·ªãt Gia C·∫ßm Gia S√∫c C√°c Lo·∫°i"},
    {"id": 1254,  "title": "Th·ªßy H·∫£i S·∫£n C√°c Lo·∫°i"},
]
# ===== NH√ìM H√ÄNG  =====
VALID_GROUPS = []
def get_groups_for_category(cat_id: int):
    df_nhucau = pd.read_parquet(NHU_CAU_PATH)
    df_nhucau = df_nhucau[df_nhucau['M√£ ng√†nh h√†ng'] == int(cat_id)]
    subgroups = df_nhucau['Nh√≥m h√†ng'].dropna().astype(str).unique().tolist()
    subgroups.sort()
    subgroups.append("Xem t·∫•t c·∫£ nh√≥m")
    return subgroups

#====== D·ªÆ LI·ªÜU SI√äU TH·ªä ======
df_sieuthi = pd.read_parquet(NHAP_BAN_PATH)
lst_sieuthi = df_sieuthi['M√£ si√™u th·ªã'].unique().tolist()

# ====== X·ª¨ L√ù TEXT ======
def handle_user_message(user_text: str):
    user_text = (user_text or "").strip()
    # ---------- (1) TEXT COMMANDS ----------
    # B·∫°n b·ªï sung c√°c nh√°nh elif kh√°c ·ªü ƒë√¢y: 'help', 'menu', 'version', ...

    if user_text.lower() == "ping":
        text = "This is Flex Message Simulator. Thank you for adding me as a friend.\nH√£y nh·∫≠p v√†o t·ª´ kho√° th√¥ng tin c·∫ßn h·ªó tr·ª£ theo g·ª£i √Ω b√™n d∆∞·ªõi nh√©"
        return [build_flex_text_message(text, bg="#B5F1F5", fg="#0A0A0A", header_fg="#8A1C1C", size="md", weight="regular", header_text="Th√¥ng b√°o")]

    # n·∫øu l√† text kh√°c m√† KH√îNG ph·∫£i to√†n s·ªë -> coi nh∆∞ kh√¥ng ph·∫£i m√£ si√™u th·ªã
    if not user_text.isdigit():
        text = "H√£y g·ª≠i [M√£ si√™u th·ªã] ho·∫∑c chia s·∫ª [V·ªã tr√≠] c·ªßa b·∫°n ƒë·ªÉ xem b√°o c√°o nh√©!"
        return [build_flex_text_message(text, bg="#038d38", fg="#FFFFFF", header_fg="#FFFFFF", size="md", weight="regular", header_text="üí°H∆∞·ªõng d·∫´n")]
    # ---------- (2) NUMBER = M√É SI√äU TH·ªä ----------
    store_id = int(user_text)
    if store_id not in lst_sieuthi:
        text = "[M√£ si√™u th·ªã] kh√¥ng t·ªìn t·∫°i!\nVui l√≤ng ki·ªÉm tra l·∫°i!"
        return [build_flex_text_message(text, bg="#761414", fg="#FFFFFF", header_fg="#FFFFFF", size="md", weight="regular", header_text="‚ö†Ô∏è C·∫£nh b√°o")]

    # Flex: CH·ªåN NG√ÄNH H√ÄNG (4 n√∫t)
    cat_flex = build_flex_categories(store_id, CATEGORIES, include_display_text=False)
    return [FlexMessage(altText="Ch·ªçn ng√†nh h√†ng", contents=FlexContainer.from_dict(cat_flex))]

def handle_postback(data: str):
    """
    B2: a=category.select  -> ƒë·ªçc parquet theo 'M√£ ng√†nh h√†ng' -> build Flex nh√≥m h√†ng
    B3: a=report_group.select -> x√°c nh·∫≠n + g·ªçi report handler t∆∞∆°ng ·ª©ng
    """
    qs = parse_qs(data or "")
    action = (qs.get("a", [""])[0])

    # ===== B∆Ø·ªöC 2: USER CH·ªåN NG√ÄNH =====
    if action == "category.select":
        store_id = int(qs.get("store", ["0"])[0] or 0)
        cat_id   = int(qs.get("cat",   ["0"])[0] or 0)

        VALID_GROUPS = get_groups_for_category(cat_id)

        # Build Flex "ch·ªçn b√°o c√°o & nh√≥m h√†ng" (d√πng c√πng groups cho m·ªçi report)
        groups_by_report = {r["id"]: VALID_GROUPS for r in REPORTS_DISPLAY}
        grp_flex = build_flex_report_group(
            store_id=store_id,
            reports=REPORTS_DISPLAY,
            groups_by_report=groups_by_report,
            groups_per_bubble=7,
            include_display_text=False,   # kh√¥ng ƒë·∫©y displayText v√†o khung chat
            cat_id=cat_id                 # gi·ªØ cat_id ƒë·ªÉ truy·ªÅn qua postback
        )
        return [FlexMessage(altText="Ch·ªçn b√°o c√°o & nh√≥m h√†ng",
                            contents=FlexContainer.from_dict(grp_flex))]

    # ===== B∆Ø·ªöC 3: USER CH·ªåN NH√ìM TRONG 1 B√ÅO C√ÅO =====
    if action == "report_group.select":
        store  = qs.get("store",  [""])[0]
        report = qs.get("report", [""])[0]
        cat_id = qs.get("cat",    [""])[0]
        group  = qs.get("group",  [""])[0]
        
        # L·∫•y title hi·ªÉn th·ªã ƒë·∫πp
        # title = next((r["title"] for r in REPORTS_DISPLAY if r["id"] == report), report)
        cat_name = next((c["title"] for c in CATEGORIES if str(c["id"]) == str(cat_id)), cat_id)
        messages = []

        # G·ªçi ƒë√∫ng report handler (ƒë√£ map trong REPORT_HANDLERS)
        if report in REPORT_HANDLERS:
            handler_func = REPORT_HANDLERS[report]
            messages.extend(handler_func(store_id=int(store), cat_id=cat_id, cat_name=cat_name, group=group))
        else:
            messages.append(TextMessage(text=f"‚ö†Ô∏è Ch∆∞a c√≥ handler cho b√°o c√°o: {report}"))

        return messages

    # ===== KH√ÅC =====
    return [TextMessage(text="L·ªói x·ª≠ l√Ω postback. Vui l√≤ng th·ª≠ l·∫°i sau!")]

def handle_location_message(lat: float, lon: float):
    """
    Nh·∫≠n v·ªã tr√≠ ng∆∞·ªùi d√πng -> t√¨m si√™u th·ªã g·∫ßn nh·∫•t -> tr·∫£ th√¥ng b√°o + Flex ch·ªçn ng√†nh h√†ng.
    """
    try:
        df = nearest_stores(lat, lon, k=1, max_km=30)
    except Exception:
        return [TextMessage(text="‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu v·ªã tr√≠. Vui l√≤ng th·ª≠ l·∫°i sau.")]

    if df is None or getattr(df, "empty", True):
        return [TextMessage(text="‚ùå Kh√¥ng t√¨m th·∫•y si√™u th·ªã trong b√°n k√≠nh 30km.")]

    raw_sid = df.iloc[0]["store_id"]
    distance = df.iloc[0]["distance_km"]
    store_id = str(int(float(raw_sid)))

    # b∆∞·ªõc 1: b√°o si√™u th·ªã g·∫ßn nh·∫•t
    confirm_msg = TextMessage(
        text=f"üìç Si√™u th·ªã g·∫ßn nh·∫•t: {store_id} (c√°ch kho·∫£ng {distance:.1f} km)."
    )

    # b∆∞·ªõc 2: g·ªçi l·∫°i flow ch·ªçn ng√†nh h√†ng
    flex_msgs = handle_user_message(store_id)

    return [confirm_msg] + flex_msgs
