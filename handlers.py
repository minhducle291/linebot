import re, os, hashlib
import pandas as pd
from urllib.parse import urljoin
from linebot.v3.messaging import TextMessage, ImageMessage, StickerMessage, QuickReply, QuickReplyItem, MessageAction
from utils import df_to_image, df_nhapban_to_image, nearest_stores
from datetime import datetime
from cache import load_df_once

# URL public (ngrok/domain)
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL", "https://finer-mantis-allowed.ngrok-free.app")
NGANH_HANG = os.getenv("NGANH_HANG", "1254")
NHU_CAU_PATH = os.getenv("NHU_CAU_PATH", f"data/data_{NGANH_HANG}_nhucau.parquet")
NHAP_BAN_PATH = os.getenv("NHAP_BAN_PATH", f"data/data_{NGANH_HANG}_nhapban.parquet")

# region Ki·ªÉm tra c√∫ ph√°p
VALID_REPORTS = {"thongtinchiahang", "ketquabanhang"}
df_subgroup = load_df_once(NHU_CAU_PATH)
VALID_GROUPS = {
    int(x.split("-")[0])
    for x in df_subgroup["Nh√≥m h√†ng"].dropna().astype(str).str.strip().unique()
    if x.split("-")[0].isdigit() and len(x.split("-")[0]) == 4
}

def parse_user_message(user_text: str, lst_store: list[int] | set[int]):
    """
    C√∫ ph√°p h·ª£p l·ªá:
      1) /ten_bao_cao ma_sieu_thi
      2) /ten_bao_cao nhom_hang ma_sieu_thi

    - ten_bao_cao ‚àà {thongtinchiahang, ketquabanhang}
    - nhom_hang (optional) ‚àà {cabien, canuocngot, haisan}
    - ma_sieu_thi: 3‚Äì5 ch·ªØ s·ªë, v√† ph·∫£i c√≥ trong lst_store
    """
    if not user_text or not user_text.strip():
        return None, "Tin nh·∫Øn tr·ªëng. C√∫ ph√°p: /ten_bao_cao [nhom_hang] ma_sieu_thi"

    parts = user_text.strip().split()
    # c·∫ßn 2 ho·∫∑c 3 ph·∫ßn
    if len(parts) not in (2, 3):
        return None, "Sai c·∫•u tr√∫c. C√∫ ph√°p: /ten_bao_cao [nhom_hang] ma_sieu_thi"

    report_token = parts[0]
    if not report_token.startswith("/"):
        return None, "Thi·∫øu d·∫•u '/' tr∆∞·ªõc t√™n b√°o c√°o. V√≠ d·ª•: /thongtinchiahang"

    report = report_token[1:].lower()
    if report not in VALID_REPORTS:
        return None, f"T√™n b√°o c√°o kh√¥ng h·ª£p l·ªá. H·ª£p l·ªá: {', '.join(VALID_REPORTS)}"

    # Tr∆∞·ªùng h·ª£p 2 ph·∫ßn: kh√¥ng c√≥ nh√≥m h√†ng
    if len(parts) == 2:
        store_str = parts[1]
        group = None
    else:
        # 3 ph·∫ßn: c√≥ nh√≥m h√†ng
        group = parts[1].lower()
        if group not in VALID_GROUPS:
            return None, f"Nh√≥m h√†ng kh√¥ng h·ª£p l·ªá. H·ª£p l·ªá: {', '.join(VALID_GROUPS)}"
        store_str = parts[2]

    # Check m√£ si√™u th·ªã: 3-5 k√Ω t·ª± digit
    if not (store_str.isdigit() and 3 <= len(store_str) <= 5):
        return None, "M√£ si√™u th·ªã ph·∫£i l√† s·ªë d√†i 3-5 k√Ω t·ª± (vd: 735, 1024)."

    store_id = int(store_str)

    # T·ªëi ∆∞u: chuy·ªÉn lst_store th√†nh set n·∫øu l√† list d√†i
    store_container = set(lst_store) if isinstance(lst_store, list) else lst_store
    if store_id not in store_container:
        return None, "M√£ si√™u th·ªã kh√¥ng n·∫±m trong danh s√°ch cho ph√©p."

    # OK
    return {"report": report, "group": group, "store_id": store_id}, None
# endregion

def handle_user_message(user_text: str):
    messages = []

    df_store = pd.read_parquet('data/location.parquet')
    lst_store = df_store['M√£ si√™u th·ªã'].tolist()
    parsed, error = parse_user_message(user_text, lst_store)

    if error:
        return [TextMessage(text=error)]
    # parsed["group"] c√≥ th·ªÉ l√† None n·∫øu user kh√¥ng nh·∫≠p nh√≥m h√†ng
    report = parsed["report"]
    group  = parsed["group"]
    store_id  = parsed["store_id"]


    if report == "thongtinchiahang":
        df = load_df_once(NHU_CAU_PATH)
        ngay_cap_nhat = df['Ng√†y c·∫≠p nh·∫≠t'].iloc[0]
        if group is not None:
            df = df[df['M√£ nh√≥m h√†ng'] == int(group)]
        df = df[df["M√£ si√™u th·ªã"] == int(store_id)][["T√™n si√™u th·ªã","T√™n s·∫£n ph·∫©m","Min chia","S·ªë mua","Tr·∫°ng th√°i chia h√†ng"]]
        ten_sieu_thi = df['T√™n si√™u th·ªã'].iloc[0] if not df.empty else "N/A"
        df = df.drop(columns=["T√™n si√™u th·ªã"])
        
        ts = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"table_thongtinchiahang_{store_id}_{ts}.png"
        out_path = f"static/{filename}"
        df_to_image(df, outfile=out_path, title=f"Th√¥ng tin chia h√†ng th·ªßy s·∫£n ST: {store_id}\n(d·ªØ li·ªáu c·∫≠p nh·∫≠t ng√†y {ngay_cap_nhat})")

        img_url = urljoin(PUBLIC_BASE_URL + "/", out_path)
        messages.append(TextMessage(text=f"ƒê√¢y l√† b·∫£ng chia h√†ng th·ªßy s·∫£n cho si√™u th·ªã {store_id}-{ten_sieu_thi} (theo ƒëvt c·ªßa s·∫£n ph·∫©m):"))
        messages.append(ImageMessage(original_content_url=img_url, preview_image_url=img_url))

    elif report == "ketquabanhang":
        df = load_df_once(NHAP_BAN_PATH)
        tu_ngay = df['T·ª´ ng√†y'].iloc[0]
        den_ngay = df['ƒê·∫øn ng√†y'].iloc[0]
        if group is not None:
            df = df[df['M√£ nh√≥m h√†ng'] == int(group)]
        df = df[df["M√£ si√™u th·ªã"] == int(store_id)][["T√™n si√™u th·ªã","Nh√≥m s·∫£n ph·∫©m","Nhu c·∫ßu","PO","Nh·∫≠p","B√°n","% Nh·∫≠p/PO","% B√°n/Nh·∫≠p","S·ªë chia hi·ªán t·∫°i"]]
        df = df.sort_values(by=["Nh·∫≠p","S·ªë chia hi·ªán t·∫°i"], ascending=False)
        df = df.drop_duplicates(subset=["Nh√≥m s·∫£n ph·∫©m"], keep="first")
        ten_sieu_thi = df['T√™n si√™u th·ªã'].iloc[0] if not df.empty else "N/A"
        df = df.drop(columns=["T√™n si√™u th·ªã"])
        
        ts = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"table_ketquabanhang_{store_id}_{ts}.png"
        out_path = f"static/{filename}"
        df_nhapban_to_image(df, outfile=out_path, title=f"Th√¥ng tin nh·∫≠p - b√°n h√†ng th·ªßy s·∫£n ST: {store_id} (ƒë∆°n v·ªã KG)\n(d·ªØ li·ªáu t·ª´ {tu_ngay} ƒë·∫øn {den_ngay})")

        img_url = urljoin(PUBLIC_BASE_URL + "/", out_path)
        messages.append(TextMessage(text=f"ƒê√¢y l√† b·∫£ng th√¥ng tin nh·∫≠p - b√°n h√†ng th·ªßy s·∫£n cho si√™u th·ªã {store_id}-{ten_sieu_thi} (ƒë∆°n v·ªã KG):"))
        messages.append(ImageMessage(original_content_url=img_url, preview_image_url=img_url))

    # Tr∆∞·ªùng h·ª£p kh√°c: tr·∫£ text m·∫∑c ƒë·ªãnh
    else:
        messages.append(TextMessage(text="H√£y nh·∫≠p /l·ªánh + m√£ si√™u th·ªã ƒë·ªÉ xem b√°o c√°o!\nV√≠ d·ª•:\n/thongtinchiahang 7300\n/ketquabanhang 7300"))
        messages.append(
            StickerMessage(
                package_id="8522",   # g√≥i sticker
                sticker_id="16581271"   # id sticker trong g√≥i
        )
    )

    return messages

def handle_location_message(lat: float, lon: float, mode: str = "ketquabanhang"):
    """
    Tr·∫£ v·ªÅ messages khi user g·ª≠i v·ªã tr√≠:
      - T·ª± t√¨m ST g·∫ßn nh·∫•t
      - G·ªçi l·∫°i handle_user_message v·ªõi /lenh <ma_st>
    mode: "ketquabanhang" | "thongtinchiahang"
    """
    # 1) t√¨m ST g·∫ßn nh·∫•t
    res = nearest_stores(lat, lon, k=3, max_km=30)
    if res is None or len(res) == 0:
        return [TextMessage(text="Kh√¥ng t√¨m th·∫•y si√™u th·ªã trong b√°n k√≠nh 30km.")]

    top = res.iloc[0]
    store_id = int(top.store_id)
    km = float(top.distance_km)

    # 2) ch·ªçn l·ªánh m·∫∑c ƒë·ªãnh
    if mode == "thongtinchiahang":
        cmd = f"/thongtinchiahang {store_id}"
    else:
        cmd = f"/ketquabanhang {store_id}"

    # 3) g·ªçi l·∫°i handler text s·∫µn c√≥
    report_msgs = handle_user_message(cmd)  # t√°i d·ª•ng logic /thongtinchiahang & /ketquabanhang ƒë√£ c√≥
    # (C√°c nh√°nh /thongtinchiahang v√† /ketquabanhang hi·ªán c√≥ s·∫µn trong handle_user_message. :contentReference[oaicite:3]{index=3} :contentReference[oaicite:4]{index=4})

    # 4) prepend th√¥ng b√°o + quick reply cho l·ªánh kh√°c
    gmap = f"https://maps.google.com/?q={top.lat},{top.lon}"
    header = TextMessage(
        text=f"üè¨ G·∫ßn b·∫°n nh·∫•t: ST {store_id} ‚Äî {km:.2f} km\nüìç {gmap}",
        quick_reply=QuickReply(
            items=[
                QuickReplyItem(action=MessageAction(label=f"Chia h√†ng ST {store_id}", text=f"/thongtinchiahang {store_id}")),
                QuickReplyItem(action=MessageAction(label=f"Nh·∫≠p-B√°n ST {store_id}", text=f"/ketquabanhang {store_id}")),
            ]
        ),
    )
    return [header] + (report_msgs or [])